openapi: 3.0.0
info:
  title: marketplace
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /api/users:
    parameters: []
    post:
      summary: ''
      operationId: register-user
      responses:
        '200':
          description: User was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '409':
          $ref: '#/components/responses/409'
        '500':
          $ref: '#/components/responses/500'
      description: Registers a new user.
  '/api/posts/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: The id of the displayed post.
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: Post was found and fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posting'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      operationId: display-post
      description: Displays a post with the given id.
    put:
      summary: ''
      operationId: modify-post
      responses:
        '204':
          description: Post was found and modified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
              examples: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      description: Modifies a post with the given id.
      security:
        - JSONWebToken: []
    delete:
      summary: ''
      operationId: delete-post
      responses:
        '204':
          description: Post was found and deleted.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
      security:
        - JSONWebToken: []
      description: Deletes a post with the given id.
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: ''
  /api/login:
    post:
      summary: ''
      operationId: login-user
      responses:
        '200':
          description: User was successfully logged in.
          content:
            application/json:
              schema:
                type: object
                description: Properties for successful login.
                properties:
                  token:
                    type: string
                    description: Generated JSON token.
                  username:
                    type: string
                    description: Username of the logged in user.
        '401':
          description: Invalid username or password.
          content:
            application/json:
              schema:
                type: object
                description: Response for inv
                properties:
                  message:
                    type: string
                    description: Message describing what happened.
              examples:
                example-1:
                  value:
                    message: Invalid username or password.
        '500':
          description: Internal Server Error
      description: Authenticates the user to use some Marketplace functionalities.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginProperties'
            examples:
              example-1:
                value:
                  username: Testaaja
                  password: testaaja123
        description: ''
  /api/posts:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: Array of fetched and paged posts.
                items:
                  $ref: '#/components/schemas/Post'
      operationId: get-posts
      description: Displays paged posts.
      parameters:
        - schema:
            type: number
            example: 5
            minimum: 1
            default: 1
          in: query
          name: index
          description: The start index of posts returned.
        - schema:
            type: number
            minimum: 1
            maximum: 100
            example: 50
            default: 100
          in: query
          name: count
          description: The number of posts returned.
    parameters: []
    post:
      summary: ''
      operationId: create-post
      responses:
        '201':
          description: New post was created.
        '400':
          description: Invalid data.
      description: Creates a new post.
      security:
        - JSONWebToken: []
  /api/posts/search:
    post:
      summary: ''
      operationId: search-posts
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ''
        '':
          description: ''
      description: Performs a search query for posts based on given parameters.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                country:
                  type: string
                  description: The country of searched posts.
                city:
                  type: string
                  description: The city of searched posts.
                posted:
                  type: string
                  description: The date of searched posts.
                category:
                  type: string
                  description: The category of searched posts.
        description: ''
    parameters: []
components:
  schemas:
    UserProperties:
      title: UserProperties
      type: object
      description: 'User of the marketplace, in this case the seller (or buyer) of products posted.'
      x-examples:
        example-1:
          id: '321'
          firstName: Konsta
          lastName: Holm
          email: user@example.com
          birthDate: '1999-03-19'
          creationDate: '2019-08-24'
          username: konstaholm
          address:
            street: Tietolinja 7
            country: Finland
            city: Oulu
            postalCode: 90570
          phoneNumber: '0441234123'
          password: pa$$word
      properties:
        id:
          description: Unique identifier of the user.
          type: string
        email:
          type: string
          format: email
          description: Email of the user.
        birthDate:
          type: string
          format: date
          example: '1997-10-31'
          description: Date of birth of the user.
        creationDate:
          type: string
          format: date
          description: The date user was created.
        username:
          type: string
          description: Username of the user.
        address:
          type: object
          description: Address of the user.
          properties:
            streetAddress:
              type: string
            country:
              type: string
            city:
              type: string
            postalCode:
              type: number
          required:
            - country
        phoneNumber:
          type: string
          description: Phone number of the user.
        password:
          type: string
          description: Password of the user.
          format: password
      required:
        - email
        - birthDate
        - username
        - phoneNumber
        - password
    Post:
      title: Posting
      type: object
      description: Posting describes an item to be sold in the marketplace
      x-examples:
        example-1:
          id: string
          description: string
          title: string
          category: Computers
          askingPrice: 0
          createdAt: '2019-08-24T14:15:22Z'
          deliveryType: Shipping
          seller:
            id: string
            firstName: string
            lastName: string
            email: user@example.com
            birthDate: '1997-10-31'
            creationDate: '2019-08-24'
            username: string
            address:
              street: string
              country: string
              city: string
              postalCode: 0
            phoneNumber: string
            password: pa$$word
          location:
            city: string
            country: string
            id: string
          images: string
      properties:
        id:
          type: string
          description: Identification number of the posting
          readOnly: true
        description:
          type: string
          description: Description of the posting
        title:
          type: string
          description: Title of the posting
        category:
          type: string
          enum:
            - Computers
            - Vehicles
            - Clothes
            - Jobs
          description: Category of the item being sold
        askingPrice:
          type: number
          description: Price of the product
        createdAt:
          type: string
          format: date-time
          description: Date of the ad created
        deliveryType:
          type: string
          enum:
            - Shipping
            - Pickup
          description: Delivery type of sold product
        seller:
          $ref: '#/components/schemas/User'
        location:
          $ref: '#/components/schemas/Location'
        images:
          type: string
          description: Images of the product being sold.
      required:
        - title
        - category
        - askingPrice
        - seller
        - location
    Location:
      title: Location
      type: object
      properties:
        city:
          type: string
        country:
          type: string
        id:
          type: string
      required:
        - city
        - country
      x-examples:
        example-1:
          city: Oulu
          country: Finland
          id: string
    CreatedUser:
      title: CreatedUser
      type: object
      properties:
        id:
          type: string
      required:
        - id
    LoginProperties:
      title: LoginProperties
      type: object
      description: Properties needed to login an user.
      properties:
        username:
          type: string
          description: Username used to login.
          example: Testaaja
        password:
          type: string
          description: Password used to login
          format: password
          example: testaaja123
      required:
        - username
        - password
      x-examples:
        example-1:
          username: Testaaja
          password: testaaja123
    ErrorMessage:
      type: object
      title: ErrorMessage
      description: Typical message returned when either 4xx or 5xx error occurs.
      additionalProperties: false
      x-examples:
        '401':
          message: Unauthorized
        '404':
          message: Post was not found
        5xx:
          message: Something went wrong
      properties:
        message:
          type: string
          description: Message describing the cause of error.
          example: Something went wrong
          readOnly: true
      required:
        - message
      readOnly: true
  parameters: {}
  responses:
    '400':
      description: Typical response for response code 400 (Bad Request).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            basic:
              value:
                message: Invalid data
    '401':
      description: Typical response for response code 401 (Unauthorized). User has not been authenticated yet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            basic:
              value:
                message: Unauthorized
    '403':
      description: Typical response for response code 403 (Forbidden). Usually occurs when requesting a resource owned/managed by other user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            basic:
              value:
                message: Access not allowed
    '404':
      description: Typical response for response code 404 (Not Found). Typically occurs when requesting a resource with an id that does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            basic:
              value:
                message: Requested resource not found
    '409':
      description: Typical response for response code 409 (Conflict).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          examples:
            login:
              value:
                message: User with that username already exists
    '500':
      description: Typical response for response code 500 (Internal server error).
      content:
        application/json:
          schema:
            description: Properties describing what went wrong.
            $ref: ''
          examples:
            basic:
              value:
                message: 'Something went wrong :('
    GET-Posts:
      description: Example response
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Post'
          examples:
            example-1:
              value:
                - id: string
                  description: string
                  title: string
                  category: Computers
                  askingPrice: 0
                  createdAt: '2019-08-24T14:15:22Z'
                  deliveryType: Shipping
                  seller:
                    id: string
                    firstName: string
                    lastName: string
                    email: user@example.com
                    birthDate: '1997-10-31'
                    creationDate: '2019-08-24'
                    username: string
                    address:
                      street: string
                      country: string
                      city: string
                      postalCode: 0
                    phoneNumber: string
                    password: pa$$word
                  location:
                    city: string
                    country: string
                    id: string
                  images: string
        application/xml:
          schema:
            type: object
            properties: {}
        multipart/form-data:
          schema:
            type: object
            properties: {}
  securitySchemes:
    JSONWebToken:
      type: http
      scheme: bearer
      description: ''
